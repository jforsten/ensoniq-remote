# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
jobs:
  mac:
    runs-on: macos-latest
    name: electron build osx
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
          architecture: 'x64' # optional, x64 or x86. If not specified, x64 will be used by default
      - run: npm install
      - run: npm run electron:build
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: jaywcjlove/github-action-package@main
      - uses: actions/upload-artifact@v2
        with:
          path: ./dist_electron/ensoniq-remote-${{ steps.info.outputs.version }}.dmg
          name: ensoniq-remote-osx
  linux:
    runs-on: ubuntu-latest
    name: electron build linux
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
          architecture: 'x64' # optional, x64 or x86. If not specified, x64 will be used by default
      - run: npm install
      - run: npm run electron:build
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: jaywcjlove/github-action-package@main
      - uses: actions/upload-artifact@v2
        with:
          path: ./dist_electron/ensoniq-remote-${{ steps.info.outputs.version }}.AppImage
          name: ensoniq-remote-linux
  win:
    runs-on: windows-latest
    name: electron build win
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
          architecture: 'x64' # optional, x64 or x86. If not specified, x64 will be used by default
      - run: npm install
      - run: npm run electron:build
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: jaywcjlove/github-action-package@main
      - uses: actions/upload-artifact@v2
        with:
          path: ./dist_electron/ensoniq-remote Setup ${{ steps.info.outputs.version }}.exe
          name: ensoniq-remote-win
      - run: |
          cd dist_electron
          dir
  release:
    runs-on: ubuntu-latest
    needs: [win, mac, linux]
    steps:
    - uses: actions/checkout@v2
    - name: Get current date
      id: date
      run: echo "MY_DATE=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ env.MY_DATE }}
        release_name: Release ${{ env.MY_DATE }}
        body: |
          Latest release
        draft: false
        prerelease: false
    - uses: actions/download-artifact@v2
    - name: Print dir  
      run: |
          tree
          
    - name: Upload Release Asset win
      id: upload-release-asset-win
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: /home/runner/work/ensoniq-remote/ensoniq-remote/ensoniq-remote-win/ensoniq-remote Setup ${{ steps.info.outputs.version }}.exe
        asset_name: ensoniq-remote-Setup ${{ steps.info.outputs.version }}.exe
        asset_content_type: application/octet-stream

    - name: Upload Release Asset osx
      id: upload-release-asset-osx
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: /home/runner/work/ensoniq-remote/ensoniq-remote/ensoniq-remote-osx/ensoniq-remote-${{ steps.info.outputs.version }}.dmg
        asset_name: ensoniq-remote-${{ steps.info.outputs.version }}.dmg
        asset_content_type: application/octet-stream
  
    - name: Upload Release Asset linux
      id: upload-release-asset-linux
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: /home/runner/work/ensoniq-remote/ensoniq-remote/ensoniq-remote-linux/ensoniq-remote-${{ steps.info.outputs.version }}.AppImage
        asset_name: ensoniq-remote-${{ steps.info.outputs.version }}.AppImage
        asset_content_type: application/octet-stream
